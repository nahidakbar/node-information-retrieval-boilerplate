[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "node-information-retrieval-boilerplate/.external-ecmascript.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/Document.js",
    "content": "/**\n * @typedef {object} Document\n * @property {string} <idfield> id field\n */\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/Document.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "typedef",
    "name": "Document",
    "memberof": "node-information-retrieval-boilerplate/src/Document.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/Document.js~Document",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "<idfield>",
        "description": "id field"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Document"
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/Results.js",
    "content": "\"use strict\";\n\n/**\n * Search Results\n */\nclass Results\n{\n  constructor()\n  {\n    this.keywords = [];\n    this.results = {};\n  }\n\n  addHit(index, hit)\n  {\n    this.results[index] = (this.results[index] || 0) + hit;\n  }\n\n  addKeyword(keyword, hits)\n  {\n    this.keywords.push({\n      keyword,\n      hits\n    });\n  }\n\n  concat(results)\n  {\n    for (const [index, score] of Object.entries(results.results))\n    {\n      this.results[index] = (this.results[index] || 0) + score;\n    }\n    if (this.keywords.length)\n    {\n      this.keywords.push({\n        keyword: 'or'\n      });\n    }\n    this.keywords = this.keywords.concat(results.keywords)\n    return this;\n  }\n\n  merge(results)\n  {\n    for (const index of Object.keys(this.results))\n    {\n      if (!results.results[index])\n      {\n        delete this.results[index];\n      }\n    }\n    for (const [index, score] of Object.entries(results.results))\n    {\n      if (this.results[index])\n      {\n        this.results[index] = this.results[index] * score;\n      }\n    }\n    if (this.keywords.length)\n    {\n      this.keywords.push({\n        keyword: 'and'\n      });\n    }\n    this.keywords = this.keywords.concat(results.keywords)\n    return this;\n  }\n\n  invert(indices)\n  {\n    for (let index = 0; index < indices.length; index++)\n    {\n      if (indices[index] !== null)\n      {\n        if (this.results[index])\n        {\n          delete this.results[index]\n        }\n        else\n        {\n          this.results[index] = 1;\n        }\n      }\n      else\n      {\n        delete this.results[index]\n      }\n    }\n    return this;\n  }\n\n  normalise(config)\n  {\n    const idField = config.idField;\n    const ids = config.ids;\n    const results = [];\n    for (const [index, score] of Object.entries(this.results))\n    {\n      results.push({\n        _index: index,\n        [idField]: ids[index],\n        score: score\n      });\n    }\n    const keywords = this.keywords;\n    return {\n      keywords,\n      results\n    };\n  }\n}\n\nmodule.exports = Results;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/Results.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "Results",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/Results.js",
    "importStyle": "Results",
    "description": "Search Results",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "keywords",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#keywords",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "results",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#results",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "addHit",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#addHit",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "hit",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "addKeyword",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#addKeyword",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "keyword",
        "types": [
          "*"
        ]
      },
      {
        "name": "hits",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "concat",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#concat",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "merge",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#merge",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "invert",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#invert",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "indices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "normalise",
    "memberof": "node-information-retrieval-boilerplate/src/Results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/Results.js~Results#normalise",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"keywords\": *, \"results\": *}"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/System.js",
    "content": "\"use strict\";\n\nconst indicesRegister = require('./index/register');\nconst processorRegister = require('./processors/register');\nconst Results = require('./Results');\nconst scores = require('./scores');\n/**\n * Information Retrieval System Main Class\n *\n * Basic workflow is:\n *\n * * create a new IRSystem\n * * add indices\n * * manage(add/remove/update)/retrive document collection/sets\n *\n * or:\n *\n * * create a new IRSystem with saved state from another IRSystem\n * * manage(add/remove/update)/retrive documents\n *\n */\nclass System\n{\n  /**\n   * Construct new IR system.\n   *\n   * @param {IRSystem} [config={}] configuration/state. Can be result of state(). See attributes.\n   */\n  constructor(config = {})\n  {\n    for (let property in config)\n    {\n      /** @private */\n      this[property] = config[property];\n    }\n    /**\n     * id field name\n     * @type {string}\n     */\n    this.idField = this.idField || 'id';\n\n    /**\n     * list of ids\n     * index -> id\n     * @private\n     */\n    this.ids = this.ids || [];\n    /**\n     * id lookup\n     * id => index\n     * @private\n     */\n    this.idLookup = this.idLookup || {};\n    // rebuild ids table\n    this.ids.forEach((id, index) => this.idLookup[id] = index);\n    /**\n     * name => index\n     * @private\n     */\n    this.indicesLookup = {};\n    /**\n     * system indices\n     * @type {Index[]}\n     */\n    this.indices = (this.indices || [])\n      .map(object =>\n      {\n        object = new(indicesRegister.lookup[object.type])(object);\n        if (object.name)\n        {\n          (this.indicesLookup[object.name] || (this.indicesLookup[object.name] = []))\n          .push(object);\n        }\n        for (let filter of object.filters)\n        {\n          (this.indicesLookup[filter] || (this.indicesLookup[filter] = []))\n          .push(object);\n        }\n        return object;\n      });\n\n    this.processorsLookup = {};\n    /**\n     * system processors\n     * @type {Processor[]}\n     */\n    this.processors = (this.processors || [])\n      .map(object =>\n      {\n        object = new(processorRegister.lookup[object.type])(object);\n        for (let bind of object.bind)\n        {\n          this.processorsLookup[bind] = this.processorsLookup[bind] || [];\n          this.processorsLookup[bind].push(object);\n        }\n        return object;\n      });\n  }\n\n  /**\n   * Dump current system state\n   * @return {object}\n   */\n  async state()\n  {\n    return {\n      idField: this.idField,\n      ids: this.ids,\n      indices: await Promise.all(this.indices.map(index => index.state())),\n      processors: await Promise.all(this.processors.map(processor => processor.state())),\n    };\n  }\n\n  /**\n   * Add a new index to the system.\n   * @return {IRSystem}\n   */\n  addIndex(index)\n  {\n    this.indices.push(index);\n    if (index.name)\n    {\n      (this.indicesLookup[index.name] || (this.indicesLookup[index.name] = []))\n      .push(index);\n    }\n    for (let filter of index.filters)\n    {\n      (this.indicesLookup[filter] || (this.indicesLookup[filter] = []))\n      .push(index);\n    }\n    return this;\n  }\n\n  addProcessor(processor)\n  {\n    this.processors.push(processor);\n    for (let bind of processor.bind)\n    {\n      this.processorsLookup[bind] = this.processorsLookup[bind] || [];\n      this.processorsLookup[bind].push(processor);\n    }\n    return this;\n  }\n\n  /**\n   * Add a set of documents to the IR system.\n   *\n   * Documents are added and removed in bulk for abusing any potential\n   * optimisations which might be available for doing things in bulk.\n   *\n   * @param {Document[]} documents document set to add\n   */\n  async addDocuments(documents = [])\n  {\n    const documentIndices = documents.map(this.helperGetIndex.bind(this));\n    for (let index of this.indices)\n    {\n      await index.addDocuments(documentIndices, documents);\n    }\n    for (let processor of (this.processorsLookup['add'] || []))\n    {\n      await processor.addDocuments(this, documentIndices, documents);\n    }\n  }\n\n  /**\n   * Remove a set of documents from the IR system.\n   * @param {Document[]} documents document set to add\n   */\n  async removeDocuments(documents = [])\n  {\n    const documentIndices = documents.map(this.helperGetIndex.bind(this));\n    for (let index of this.indices)\n    {\n      await index.removeDocuments(documentIndices);\n    }\n    for (let processor of (this.processorsLookup['remove'] || []))\n    {\n      await processor.removeDocuments(this, documentIndices);\n    }\n    this.helperRemoveIndices(documentIndices);\n  }\n\n  /**\n   * Alias of addDocuments.\n   *\n   * Add is the same as update in this system.\n   *\n   * @param {Document[]} documents document set to add\n   */\n  updateDocuments(documents = [])\n  {\n    return this.addDocuments(documents);\n  }\n\n  /**\n   * Retrieve a list of documents that matches a query.\n   * @param {Query} query query\n   * @return {Document[]} retrieve\n   */\n  async retrieveDocuments(query, score = scores.naiveBayes)\n  {\n    if (query && query.filter)\n    {\n      for (let processor of (this.processorsLookup['query'] || []))\n      {\n        await processor.processQuery(this, query);\n      }\n      const results = (await this.getResults(query.filter, score))\n        .normalise(this);\n      for (let processor of (this.processorsLookup['results'] || []))\n      {\n        await processor.processResults(this, query, results);\n      }\n      return results;\n    }\n    return {};\n  }\n\n  /**\n   * @protected\n   */\n  async getResults(filter, score)\n  {\n    switch (filter.filter)\n    {\n    case 'and':\n      return await this.getAndResults(filter.values, score);\n    case 'or':\n      return await this.getOrResults(filter.values, score);\n    case 'not':\n      return await this.getNotResults(filter.values, score);\n    default:\n      return await this.getFilterResults(filter, score);\n    }\n  }\n\n  async getFilterResults(filter, score)\n  {\n    let results = new Results();\n    for (let index of (this.indicesLookup[filter.field || filter.filter] || []))\n    {\n      const newResults = new Results();\n      await index.filterDocuments(filter, newResults, score);\n      results = results.concat(newResults);\n    }\n    return results;\n  }\n\n  /**\n   * @protected\n   */\n  async getAndResults(values, score)\n  {\n    let results = undefined;\n    for (let filter of values)\n    {\n      let filterResults = await this.getResults(filter, score);\n      if (!results)\n      {\n        results = filterResults;\n      }\n      else\n      {\n        results = results.merge(filterResults);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * @protected\n   */\n  async getOrResults(values, score)\n  {\n    let results = new Results();\n    for (let filter of values)\n    {\n      let filterResults = await this.getResults(filter, score);\n      results = results.concat(filterResults);\n    }\n    return results;\n  }\n\n  /**\n   * @protected\n   */\n  async getNotResults(filter, score)\n  {\n    const results = await this.getFilterResults(filter, score);\n    return results.invert(this.ids);\n  }\n\n  /**\n   * @protected\n   */\n  helperGetIndex(record)\n  {\n    const id = record[this.idField];\n    let lookup = this.idLookup[id];\n    if (lookup === undefined)\n    {\n      lookup = this.ids.indexOf(null);\n      if (lookup === -1)\n      {\n        lookup = this.ids.length;\n      }\n      this.idLookup[id] = lookup\n      this.ids[lookup] = id\n    }\n    return lookup;\n  }\n\n\n  helperRemoveIndices(indices)\n  {\n    indices.forEach(index =>\n    {\n      const id = this.ids[index];\n      delete this.idLookup[id];\n      this.ids[index] = null;\n    })\n  }\n\n  /**\n   * @public\n   */\n  meta()\n  {\n    const fields = {};\n    let sort = {};\n    for (let index of this.indices)\n    {\n      fields[index.name] = {\n        filters: index.filters\n      }\n      index.sorts.forEach(key => sort[key] = 1);\n    }\n    sort = Object.keys(sort);\n    const meta = {\n      fields,\n      sort\n    };\n    return meta;\n  }\n\n}\n\nmodule.exports = System;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/System.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "indicesRegister",
    "memberof": "node-information-retrieval-boilerplate/src/System.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/System.js~indicesRegister",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/System.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "processorRegister",
    "memberof": "node-information-retrieval-boilerplate/src/System.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/System.js~processorRegister",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/System.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "Results",
    "memberof": "node-information-retrieval-boilerplate/src/System.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/System.js~Results",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/System.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "scores",
    "memberof": "node-information-retrieval-boilerplate/src/System.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/System.js~scores",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/System.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "System",
    "memberof": "node-information-retrieval-boilerplate/src/System.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/System.js",
    "importStyle": "System",
    "description": "Information Retrieval System Main Class\n\nBasic workflow is:\n\n* create a new IRSystem\n* add indices\n* manage(add/remove/update)/retrive document collection/sets\n\nor:\n\n* create a new IRSystem with saved state from another IRSystem\n* manage(add/remove/update)/retrive documents",
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#constructor",
    "access": "public",
    "description": "Construct new IR system.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "IRSystem"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "configuration/state. Can be result of state(). See attributes."
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "[property]",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#[property]",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "idField",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#idField",
    "access": "public",
    "description": "id field name",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "ids",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#ids",
    "access": "private",
    "description": "list of ids\nindex -> id",
    "lineNumber": 47,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "idLookup",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#idLookup",
    "access": "private",
    "description": "id lookup\nid => index",
    "lineNumber": 53,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "indicesLookup",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#indicesLookup",
    "access": "private",
    "description": "name => index",
    "lineNumber": 60,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "indices",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#indices",
    "access": "public",
    "description": "system indices",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Index[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "processorsLookup",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#processorsLookup",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "processors",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#processors",
    "access": "public",
    "description": "system processors",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "Processor[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "state",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#state",
    "access": "public",
    "description": "Dump current system state",
    "lineNumber": 104,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "addIndex",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#addIndex",
    "access": "public",
    "description": "Add a new index to the system.",
    "lineNumber": 118,
    "return": {
      "nullable": null,
      "types": [
        "IRSystem"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "addProcessor",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#addProcessor",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "processor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "addDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#addDocuments",
    "access": "public",
    "description": "Add a set of documents to the IR system.\n\nDocuments are added and removed in bulk for abusing any potential\noptimisations which might be available for doing things in bulk.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Document[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documents",
        "description": "document set to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "removeDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#removeDocuments",
    "access": "public",
    "description": "Remove a set of documents from the IR system.",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "Document[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documents",
        "description": "document set to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "updateDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#updateDocuments",
    "access": "public",
    "description": "Alias of addDocuments.\n\nAdd is the same as update in this system.",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "Document[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documents",
        "description": "document set to add"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "retrieveDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#retrieveDocuments",
    "access": "public",
    "description": "Retrieve a list of documents that matches a query.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Query"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "query"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Document[]"
      ],
      "spread": false,
      "description": "retrieve"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getResults",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#getResults",
    "access": "protected",
    "description": "",
    "lineNumber": 223,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getFilterResults",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#getFilterResults",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getAndResults",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#getAndResults",
    "access": "protected",
    "description": "",
    "lineNumber": 253,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getOrResults",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#getOrResults",
    "access": "protected",
    "description": "",
    "lineNumber": 274,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getNotResults",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#getNotResults",
    "access": "protected",
    "description": "",
    "lineNumber": 288,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "helperGetIndex",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#helperGetIndex",
    "access": "protected",
    "description": "",
    "lineNumber": 297,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "helperRemoveIndices",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#helperRemoveIndices",
    "access": "public",
    "description": null,
    "lineNumber": 315,
    "undocument": true,
    "params": [
      {
        "name": "indices",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "meta",
    "memberof": "node-information-retrieval-boilerplate/src/System.js~System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/System.js~System#meta",
    "access": "public",
    "description": "",
    "lineNumber": 328,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/evaluate.js",
    "content": "\"use strict\";\n\n/**\n * Evaluate an IR system.\n *\n * @param  {System} system description\n * @param  {QueryParser} parser  description\n * @param  {object} cases  description\n * @return {object}        description\n */\nasync function evaluate(system, parser, expected)\n{\n  // find actual results\n  const actual = {};\n  for (const query of Object.keys(expected))\n  {\n    actual[query] = (await system.retrieveDocuments(parser.parse(query)));\n    actual[query] = actual[query].results.map(x => x.id);\n  }\n\n  let count = Object.keys(expected)\n    .length;\n\n  const individual = {};\n\n  for (let [query, T] of Object.entries(expected))\n  {\n    let P = actual[query];\n    const TP = P.filter(a => T.indexOf(a) !== -1)\n      .length;\n    const FP = P.filter(a => T.indexOf(a) === -1)\n      .length;\n\n    let F = system.ids.filter(n => T.indexOf(n) === -1)\n      .length;\n\n    let N = system.ids.filter(n => P.indexOf(n) === -1);\n    const TN = N.filter(a => T.indexOf(a) === -1)\n      .length;\n    const FN = N.filter(a => T.indexOf(a) !== -1)\n      .length;\n    N = N.length;\n    P = P.length;\n    T = T.length;\n\n    let TPR = (TP + FN) !== 0 ? TP / (TP + FN) : 0;\n    let TNR = (TN + FP) !== 0 ? TN / (TN + FP) : 0;\n    let PPV = P !== 0 ? TP / (TP + FP) : 0;\n    let NPV = N !== 0 ? TN / (TN + FN) : 0;\n    let FNR = 1 - TPR;\n    let FPR = 1 - TNR;\n    let FDR = 1 - PPV;\n    let FOR = 1 - NPV;\n    let ACC = (TN + TP) / (P + N);\n    let F1 = 2 * PPV * TPR / (PPV + TPR);\n    let MCC = (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));\n    let BM = TPR + TNR - 1;\n    let MK = PPV + NPV - 1;\n\n    individual[query] = {\n      T,\n      F,\n      P,\n      N,\n      TP,\n      TN,\n      FP,\n      FN,\n      TPR,\n      TNR,\n      PPV,\n      NPV,\n      FNR,\n      FPR,\n      FDR,\n      FOR,\n      ACC,\n      F1,\n      MCC,\n      BM,\n      MK\n    }\n\n  }\n\n  const overall = {};\n  for (let ind of Object.values(individual))\n  {\n    for (let [marker, value] of Object.entries(ind))\n    {\n      overall[marker] = overall[marker] || 0;\n      if (Number.isFinite(value))\n      {\n        overall[marker] += value / count;\n      }\n    }\n  }\n\n  return {\n    individual,\n    overall\n  };\n}\n\nmodule.exports = evaluate;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/evaluate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "evaluate",
    "memberof": "node-information-retrieval-boilerplate/src/evaluate.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/evaluate.js~evaluate",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/evaluate.js",
    "importStyle": "evaluate",
    "description": "Evaluate an IR system.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "System"
        ],
        "spread": false,
        "optional": false,
        "name": "system",
        "description": "description"
      },
      {
        "nullable": null,
        "types": [
          "QueryParser"
        ],
        "spread": false,
        "optional": false,
        "name": "parser",
        "description": "description"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "cases",
        "description": "description"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "description"
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "content": "\"use strict\";\n\nconst Index = require('./Index');\nconst extractObjectValues = require('../misc/extractObjectValues');\n\nconst INDEX_TYPE = 'boolean';\n\nclass BooleanIndex extends Index\n{\n  constructor(config = {}, type = undefined)\n  {\n    super(config, type || INDEX_TYPE);\n    this.filters = ['is', 'exists'];\n  }\n\n  getDocumentValues(document)\n  {\n    let value = null;\n    extractObjectValues(document, this.fields, newValue =>\n    {\n      if (typeof newValue === 'boolean')\n      {\n        value = newValue;\n      }\n    });\n    return value;\n  }\n\n  analyseValues(values)\n  {\n    return values;\n  }\n\n  createIndex()\n  {\n    return [];\n  }\n\n  /**\n   * O(documentIndices)\n   */\n  async addToIndex(index, documentIndices, documentsValues)\n  {\n    documentIndices.forEach((documentIndex, valuesOffset) =>\n    {\n      let value = documentsValues[valuesOffset];\n      index[documentIndex] = value;\n    });\n  }\n\n  /**\n   * O(documentIndices)\n   */\n  async removeFromIndex(index, documentIndices, documentsValues)\n  {\n    documentIndices.forEach(documentIndex => index[documentIndex] = null);\n  }\n\n  filterBasedOnIndex(index, filter, results)\n  {\n    switch (filter.filter)\n    {\n    case 'exists':\n      return this.filterExistsImpl(index, filter, results);\n    case 'is':\n      return this.filterIsImpl(index, filter, results);\n    }\n    return results;\n  }\n\n  filterExistsImpl(index, filter, results)\n  {\n    const targetValue = filter.values[0].toLowerCase() === 'true';\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const exists = typeof index[resultIndex] === 'boolean';\n      if (targetValue === exists)\n      {\n        results.addHit(resultIndex, 1);\n      }\n    }\n    return results;\n  }\n\n  filterIsImpl(index, filter, results)\n  {\n    const targetValue = filter.values[0].toLowerCase() === 'true';\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      if (index[resultIndex] === targetValue)\n      {\n        results.addHit(resultIndex, 1);\n      }\n    }\n    return results;\n  }\n\n}\n\nmodule.exports = BooleanIndex;\nrequire('./register')\n  .add(BooleanIndex, INDEX_TYPE);\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "Index",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~Index",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "extractObjectValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~extractObjectValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "INDEX_TYPE",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~INDEX_TYPE",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "BooleanIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/BooleanIndex.js",
    "importStyle": "BooleanIndex",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "Index"
    ]
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "filters",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#filters",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getDocumentValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#getDocumentValues",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "document",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "analyseValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#analyseValues",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "createIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#createIndex",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "addToIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#addToIndex",
    "access": "public",
    "description": "O(documentIndices)",
    "lineNumber": 42,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "removeFromIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#removeFromIndex",
    "access": "public",
    "description": "O(documentIndices)",
    "lineNumber": 54,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "filterBasedOnIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#filterBasedOnIndex",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "filterExistsImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#filterExistsImpl",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "filterIsImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/BooleanIndex.js~BooleanIndex#filterIsImpl",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index/Index.js",
    "content": "\"use strict\";\n\nconst Results = require('../Results');\n\n/**\n * An index\n */\nclass Index\n{\n  /**\n   * Construct a new Index\n   *\n   * @param {object} [config={}] configuration; see properties\n   */\n  constructor(config = {}, type = undefined)\n  {\n    for (let property in config)\n    {\n      /**\n       * @private\n       */\n      this[property] = config[property];\n    }\n    /**\n     * Type of index.\n     * These are usually predefined values. Filled in by class.\n     * @type {string}\n     */\n    this.type = this.type || type || 'none';\n    /**\n     * List of fields it should index.\n     * @type {string[]}\n     */\n    this.fields = this.fields || [];\n    /**\n     * List of field values by index.\n     * These values are used to add/remove documents from index and also used for sorting.\n     * @protected\n     * @type {string}\n     */\n    this.values = this.values || [];\n    /**\n     * List of filters supported.\n     * These are usually predefined values. Filled in by class.\n     * @type {string}\n     */\n    this.filters = this.filters || [];\n    /**\n     * Actual Index.\n     * Format depends on type of index. Override createIndex();\n     * @type {object}\n     */\n    this.index = this.index || false;\n\n    /**\n     * Field values this index can supply for sorting.\n     * @type {string}\n     */\n    this.sorts = this.sorts || [];\n\n    /**\n     * Information gain.\n     * TODO: should determine which field to query first etc.\n     * @type {number}\n     */\n    this.entropy = this.entropy || 0;\n  }\n\n  /**\n   * Dump current index state.\n   * @return {object}\n   */\n  async state()\n  {\n    return {\n      name: this.name,\n      type: this.type,\n      fields: this.fields,\n      values: this.values,\n      index: this.index,\n      filters: this.filters,\n      sorts: this.sorts,\n      entropy: this.entropy\n    };\n  }\n\n  /**\n   * Adds a set of documents to Index\n   *\n   * @param {number[]} documentIndices Index of document ids in the list of ids. Indices must store document data by this index.\n   * @param {Document[]} documents Actual documents.\n   */\n  async addDocuments(documentIndices, documents)\n  {\n    await this.makeSureIndexExists();\n    await this.removeExistingValues(documentIndices);\n    await this.addDocumentsToIndex(documentIndices, documents);\n  }\n\n  /**\n   * Removes a set of documents from Index\n   * @param {number[]} documentIndices Index of document ids in the list of ids. Indices must store document data by this index.\n   */\n  async removeDocuments(documentIndices)\n  {\n    await this.removeExistingValues(documentIndices);\n  }\n\n  /**\n   * Filter results based on query\n   *\n   * @param {QueryFilter} queryFilter query to filter with\n   * @param {Results} results results to filter (modify results object)\n   */\n  filterDocuments(queryFilter, results = new Results(), score)\n  {\n    return this.filterBasedOnIndex(this.index, queryFilter, results, score);\n  }\n\n  /**\n   * @private\n   */\n  async makeSureIndexExists()\n  {\n    if (!this.index)\n    {\n      this.index = await this.createIndex();\n    }\n  }\n\n  /**\n   * @private\n   */\n  async removeExistingValues(documentIndices)\n  {\n    const values = documentIndices.map(index => this.values[index]);\n    await this.removeFromIndex(this.index, documentIndices, values);\n    documentIndices.forEach(index => this.values[index] = null);\n  }\n\n  /**\n   * @private\n   */\n  async addDocumentsToIndex(documentIndices, documents)\n  {\n    let documentsValues = documents.map(this.getDocumentValues.bind(this));\n    let analysed = await this.analyseValues(documentsValues);\n    await this.addToIndex(this.index, documentIndices, analysed);\n    documentIndices.forEach((index, i) => this.values[index] = analysed[i]);\n  }\n\n  /**\n   * Extract values out of a document object.\n   *\n   * It is set up like this so that we can override this method and filter\n   * the values we don't like.\n   *\n   * @example\n   * {field: ['a', 'b']} should return ['a', 'b']\n   * @protected\n   * @param {Document} document\n   * @return {object[]}\n   */\n  getDocumentValues(document)\n  {\n    throw new Error('Abstract')\n  }\n\n  /**\n   * Processing before adding to index.\n   *\n   * By default, it turns list of objects into a map of string representation\n   * of the objects to their occurance tally.\n   *\n   * @protected\n   * @param {object[][]} values list of values for each documents\n   * @return {object[][]}\n   */\n  analyseValues(values)\n  {\n    return values.map(this.analyseValue.bind(this));\n  }\n\n  analyseValue(row)\n  {\n    let total = {};\n    for (let value of row)\n    {\n      total[value] = total[value] || 0;\n      total[value]++;\n    }\n    return total;\n  }\n\n  /**\n   * Create an empty index.\n   * @protected\n   * @return {IndexImplementation} default is {}\n   */\n  createIndex()\n  {\n    throw new Error('TODO: createIndex is not implemented');\n  }\n\n  /**\n   * Add to index.\n   * @abstract\n   * @param {IndexImplementation} index\n   * @param {number[]} documentIndices\n   * @param {string[][]} documentValues\n   */\n  addToIndex(index, documentIndices, documentValues)\n  {\n    throw new Error('TODO: addToIndex is not implemented');\n  }\n\n  /**\n   * Remove from index\n   * @abstract\n   * @param {IndexImplementation} index\n   * @param {number[]} documentIndices\n   * @param {string[][]} documentValues\n   */\n  removeFromIndex(index, documentIndices, documentValues)\n  {\n    throw new Error('TODO: removeFromIndex is not implemented');\n  }\n\n  /**\n   * Filter results based on index\n   * @abstract\n   * @param {IndexImplementation} index\n   * @param {QueryFilter} queryFilter\n   * @param {Results} results\n   */\n  filterBasedOnIndex(index, queryFilter, results)\n  {\n    throw new Error('TODO: filterBasedOnIndex is not implemented');\n  }\n\n}\n\nmodule.exports = Index;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index/Index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "Results",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Results",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/Index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "Index",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/Index.js",
    "importStyle": "Index",
    "description": "An index",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#constructor",
    "access": "public",
    "description": "Construct a new Index",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "configuration; see properties"
      }
    ]
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "[property]",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#[property]",
    "access": "private",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "type",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#type",
    "access": "public",
    "description": "Type of index.\nThese are usually predefined values. Filled in by class.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "fields",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#fields",
    "access": "public",
    "description": "List of fields it should index.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "values",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#values",
    "access": "protected",
    "description": "List of field values by index.\nThese values are used to add/remove documents from index and also used for sorting.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "filters",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#filters",
    "access": "public",
    "description": "List of filters supported.\nThese are usually predefined values. Filled in by class.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "index",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#index",
    "access": "public",
    "description": "Actual Index.\nFormat depends on type of index. Override createIndex();",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "sorts",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#sorts",
    "access": "public",
    "description": "Field values this index can supply for sorting.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "entropy",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#entropy",
    "access": "public",
    "description": "Information gain.\nTODO: should determine which field to query first etc.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "state",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#state",
    "access": "public",
    "description": "Dump current index state.",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "addDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#addDocuments",
    "access": "public",
    "description": "Adds a set of documents to Index",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documentIndices",
        "description": "Index of document ids in the list of ids. Indices must store document data by this index."
      },
      {
        "nullable": null,
        "types": [
          "Document[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documents",
        "description": "Actual documents."
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "removeDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#removeDocuments",
    "access": "public",
    "description": "Removes a set of documents from Index",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documentIndices",
        "description": "Index of document ids in the list of ids. Indices must store document data by this index."
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "filterDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#filterDocuments",
    "access": "public",
    "description": "Filter results based on query",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "QueryFilter"
        ],
        "spread": false,
        "optional": false,
        "name": "queryFilter",
        "description": "query to filter with"
      },
      {
        "nullable": null,
        "types": [
          "Results"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "results to filter (modify results object)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "makeSureIndexExists",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#makeSureIndexExists",
    "access": "private",
    "description": "",
    "lineNumber": 123,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "removeExistingValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#removeExistingValues",
    "access": "private",
    "description": "",
    "lineNumber": 134,
    "ignore": true,
    "params": [
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "addDocumentsToIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#addDocumentsToIndex",
    "access": "private",
    "description": "",
    "lineNumber": 144,
    "ignore": true,
    "params": [
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documents",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "getDocumentValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#getDocumentValues",
    "access": "protected",
    "description": "Extract values out of a document object.\n\nIt is set up like this so that we can override this method and filter\nthe values we don't like.",
    "examples": [
      "{field: ['a', 'b']} should return ['a', 'b']"
    ],
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Document"
        ],
        "spread": false,
        "optional": false,
        "name": "document",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "analyseValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#analyseValues",
    "access": "protected",
    "description": "Processing before adding to index.\n\nBy default, it turns list of objects into a map of string representation\nof the objects to their occurance tally.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "object[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "list of values for each documents"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[][]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "analyseValue",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#analyseValue",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "row",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "createIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#createIndex",
    "access": "protected",
    "description": "Create an empty index.",
    "lineNumber": 200,
    "return": {
      "nullable": null,
      "types": [
        "IndexImplementation"
      ],
      "spread": false,
      "description": "default is {}"
    },
    "params": []
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "addToIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#addToIndex",
    "access": "public",
    "description": "Add to index.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "IndexImplementation"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documentIndices",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "documentValues",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "removeFromIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#removeFromIndex",
    "access": "public",
    "description": "Remove from index",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "IndexImplementation"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "documentIndices",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "documentValues",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "filterBasedOnIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/Index.js~Index",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/Index.js~Index#filterBasedOnIndex",
    "access": "public",
    "description": "Filter results based on index",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "IndexImplementation"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "QueryFilter"
        ],
        "spread": false,
        "optional": false,
        "name": "queryFilter",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Results"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "content": "\"use strict\";\n\nconst Index = require('./Index');\nconst extractObjectValues = require('../misc/extractObjectValues');\n\nconst INDEX_TYPE = 'number';\n\nclass NumberIndex extends Index\n{\n  constructor(config = {}, type = undefined)\n  {\n    super(config, type || INDEX_TYPE);\n    this.filters = ['lessThan', 'moreThan', 'equalTo', 'exists'];\n  }\n\n  getDocumentValues(document)\n  {\n    let values = [];\n    extractObjectValues(document, this.fields, newValue =>\n    {\n      if (typeof newValue === 'number' && Number.isFinite(newValue))\n      {\n        values.push(newValue);\n      }\n    });\n    if (values.length > 0)\n    {\n      return values.sort();\n    }\n    else\n    {\n      return null;\n    }\n  }\n\n  analyseValues(values)\n  {\n    return values;\n  }\n\n  createIndex()\n  {\n    return [];\n  }\n\n  async addToIndex(index, documentIndices, documentsValues)\n  {\n    /**\n     * O(documentIndices)\n     */\n    documentIndices.forEach((documentIndex, valuesOffset) =>\n    {\n      let value = documentsValues[valuesOffset];\n      index[documentIndex] = value;\n    });\n  }\n\n  /**\n   * O(documentIndices)\n   */\n  async removeFromIndex(index, documentIndices, documentsValues)\n  {\n    documentIndices.forEach(documentIndex => index[documentIndex] = null);\n  }\n\n  filterBasedOnIndex(index, filter, results)\n  {\n    switch (filter.filter)\n    {\n    case 'exists':\n      return this.filterExistsImpl(index, filter, results);\n    case 'lessThan':\n      return this.filterLessThanImpl(index, filter, results);\n    case 'moreThan':\n      return this.filterMoreThanImpl(index, filter, results);\n    case 'equalTo':\n      return this.filterEqualToImpl(index, filter, results);\n    }\n    return results;\n  }\n\n  filterExistsImpl(index, filter, results)\n  {\n    const targetValue = filter.values[0].toLowerCase() === 'true';\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const exists = !!(index[resultIndex]);\n      if (targetValue === exists)\n      {\n        results.addHit(resultIndex, 1);\n      }\n    }\n    return results;\n  }\n\n  filterLessThanImpl(index, filter, results)\n  {\n    const targetValue = Math.min.apply(null, filter.values.map(parseFloat)\n      .filter(Number.isFinite));\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const values = (index[resultIndex] || [])\n        .filter(v => v < targetValue);\n      if (values.length)\n      {\n        results.addHit(resultIndex, values.length);\n      }\n    }\n    return results;\n  }\n\n  filterMoreThanImpl(index, filter, results)\n  {\n    const targetValue = Math.max.apply(null, filter.values.map(parseFloat)\n      .filter(Number.isFinite));\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const values = (index[resultIndex] || [])\n        .filter(v => v > targetValue);\n      if (values.length)\n      {\n        results.addHit(resultIndex, values.length);\n      }\n    }\n    return results;\n  }\n\n  filterEqualToImpl(index, filter, results)\n  {\n    const targetValue = filter.values.map(parseFloat)\n      .filter(Number.isFinite)[0];\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const values = (index[resultIndex] || [])\n        .filter(v => Math.abs(v - targetValue) < 1e-10);\n      if (values.length)\n      {\n        results.addHit(resultIndex, values.length);\n      }\n    }\n    return results;\n  }\n\n}\n\nmodule.exports = NumberIndex;\nrequire('./register')\n  .add(NumberIndex, INDEX_TYPE);\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "Index",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~Index",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "extractObjectValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~extractObjectValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "INDEX_TYPE",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~INDEX_TYPE",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "NumberIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/NumberIndex.js",
    "importStyle": "NumberIndex",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "Index"
    ]
  },
  {
    "__docId__": 142,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "filters",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#filters",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "getDocumentValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#getDocumentValues",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "document",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "analyseValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#analyseValues",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "createIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#createIndex",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "addToIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#addToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "removeFromIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#removeFromIndex",
    "access": "public",
    "description": "O(documentIndices)",
    "lineNumber": 61,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "filterBasedOnIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#filterBasedOnIndex",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "filterExistsImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#filterExistsImpl",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "filterLessThanImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#filterLessThanImpl",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "filterMoreThanImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#filterMoreThanImpl",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "filterEqualToImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/NumberIndex.js~NumberIndex#filterEqualToImpl",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "content": "\"use strict\";\n\nconst Index = require('./Index');\nconst extractObjectValues = require('../misc/extractObjectValues');\nconst decoder = require('unidecode');\n\nconst INDEX_TYPE = 'string';\n\nclass StringIndex extends Index\n{\n  constructor(config = {}, type = undefined)\n  {\n    super(config, type || INDEX_TYPE);\n    this.filters = ['match', 'exists'];\n  }\n\n  getDocumentValues(document)\n  {\n    const values = [];\n    extractObjectValues(document, this.fields, (value, field, scale) =>\n    {\n      if (typeof value === 'string')\n      {\n        values.push(decoder(value)\n          .toLowerCase());\n      }\n    });\n    return values;\n  }\n\n  createIndex()\n  {\n    return [];\n  }\n\n  async addToIndex(index, documentIndices, documentsValues)\n  {\n    /**\n     * O(documentIndices)\n     */\n    documentIndices.forEach((documentIndex, valuesOffset) =>\n    {\n      let value = documentsValues[valuesOffset];\n      index[documentIndex] = Object.keys(value)\n        .join('|');\n    });\n    // console.log(documentsValues, index)\n  }\n\n  /**\n   * O(documentIndices)\n   */\n  async removeFromIndex(index, documentIndices, documentsValues)\n  {\n    documentIndices.forEach(documentIndex => index[documentIndex] = null);\n  }\n\n  filterBasedOnIndex(index, filter, results)\n  {\n    switch (filter.filter)\n    {\n    case 'exists':\n      return this.filterExistsImpl(index, filter, results);\n    case 'match':\n      return this.filterMatchImpl(index, filter, results);\n    }\n    return results;\n  }\n\n  filterExistsImpl(index, filter, results)\n  {\n    const targetValue = filter.values[0].toLowerCase() === 'true';\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const exists = !!(index[resultIndex]);\n      if (targetValue === exists)\n      {\n        results.addHit(resultIndex, 1);\n      }\n    }\n    return results;\n  }\n\n  filterMatchImpl(index, filter, results)\n  {\n    filter.values = filter.values.map(value => value.toLowerCase())\n    for (let resultIndex = 0; resultIndex < index.length; resultIndex++)\n    {\n      const values = index[resultIndex];\n      if (values && filter.values.filter(value => values.indexOf(value) === -1)\n        .length === 0)\n      {\n        results.addHit(resultIndex, 1);\n      }\n    }\n    return results;\n  }\n}\n\nmodule.exports = StringIndex;\nrequire('./register')\n  .add(StringIndex, INDEX_TYPE);\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "Index",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~Index",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "extractObjectValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~extractObjectValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "decoder",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~decoder",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "INDEX_TYPE",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~INDEX_TYPE",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "StringIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/StringIndex.js",
    "importStyle": "StringIndex",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Index"
    ]
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "filters",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#filters",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getDocumentValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#getDocumentValues",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "document",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "createIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#createIndex",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "addToIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#addToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "removeFromIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#removeFromIndex",
    "access": "public",
    "description": "O(documentIndices)",
    "lineNumber": 53,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "filterBasedOnIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#filterBasedOnIndex",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "filterExistsImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#filterExistsImpl",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "filterMatchImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/StringIndex.js~StringIndex#filterMatchImpl",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "content": "\"use strict\";\n\nconst Index = require('./Index');\nconst extractObjectValues = require('../misc/extractObjectValues');\nconst decoder = require('unidecode');\nconst Lexer = require('pos').Lexer;\nconst Tagger = require('pos')\n  .Tagger;\nconst lemmer = require('lemmatizer').lemmatizer;\nconst stemmer = require('lancaster-stemmer');\n\nconst INDEX_TYPE = 'text';\n\nclass TextIndex extends Index\n{\n  constructor(config = {}, type = undefined)\n  {\n    super(config, type || INDEX_TYPE);\n    this.filters = ['query', 'queryexact'];\n    this.decoder = decoder;\n    this.lex = new Lexer();\n    this.lex = this.lex.lex.bind(this.lex)\n    this.tag = new Tagger();\n    this.tag = this.tag.tag.bind(this.tag);\n    this.lemm = lemmer;\n    this.stem = stemmer;\n    this.totalWordsTally = config.totalWordsTally || 0;\n    this.maximumDocumentsByTerm = config.maximumDocumentsByTerm || 0;\n    this.sorts = [this.name];\n    this.allowPartialMatch = this.allowPartialMatch || false;\n  }\n\n  async state()\n  {\n    return Object.assign(await super.state(), {\n      totalWordsTally: this.totalWordsTally,\n      maximumDocumentsByTerm: this.maximumDocumentsByTerm,\n      allowPartialMatch: this.allowPartialMatch\n    });\n  }\n\n  getDocumentValues(document)\n  {\n    let values = [];\n    extractObjectValues(document, this.fields, (newValue, field, scale) =>\n    {\n      if (typeof newValue === 'string')\n      {\n        newValue = newValue.replace(/\\s+/g, ' ')\n          .trim();\n        if (newValue)\n        {\n          values.push([newValue, scale]);\n        }\n      }\n    });\n    return values.length && values || null;\n  }\n\n  analyseValue(valuesList)\n  {\n    if (valuesList)\n    {\n      let count = 0;\n      let words = {};\n      let bagOfWords = {};\n      let stemmedFull = {};\n      let maximum = 0;\n      for (let [original, scale] of valuesList)\n      {\n        let tokens = this.tag(this.lex(decoder(original)\n          .toLowerCase())).filter(t => t[1].match(/[A-Z]/));\n        tokens.forEach(token => token.push(this.stem(token[0])))\n        for (let value of tokens)\n        {\n          const token = value[2];\n          words[token] = words[token] || 0;\n          words[token] += scale;\n          count += scale;\n          maximum = Math.max(words[token], maximum)\n          const lemm = this.lemm(value[0]);\n          if (lemm !== value[0])\n          {\n            const ltoken = this.stem(lemm);\n            bagOfWords[ltoken] = bagOfWords[ltoken] || 0;\n            bagOfWords[ltoken] += .001;\n            count += .001;\n          }\n        }\n        for (let tokenIndex = 1; tokenIndex < tokens.length; tokenIndex++)\n        {\n          const t1 = tokens[tokenIndex - 1], t2 = tokens[tokenIndex];\n          const token = t1[2] + t2[2];\n          bagOfWords[token] = bagOfWords[token] || 0;\n          bagOfWords[token] += 1;\n          count += 1;\n        }\n        stemmedFull[tokens.map(token => token[2])\n          .join(' ')] = 1;\n      }\n      stemmedFull = Object.keys(stemmedFull)\n        .join(' ');\n      return {\n        stemmedFull,\n        words,\n        bagOfWords,\n        count,\n        maximum\n      };\n    }\n    else\n    {\n      return {\n        stemmedFull: '',\n        words: {},\n        bagOfWords: {},\n        count: 0\n      };\n    }\n  }\n\n  createIndex()\n  {\n    return {};\n  }\n\n  async addToIndex(index, documentIndices, documentsValues)\n  {\n    /**\n     * O(documentIndices)\n     */\n    documentIndices.forEach((documentIndex, valuesOffset) =>\n    {\n      const analysed = documentsValues[valuesOffset];\n      for (const [term, tally] of Object.entries(analysed.words))\n      {\n        index[term] = index[term] || {\n          total: 0\n        };\n        index[term][documentIndex] = index[term][documentIndex] || 0;\n        index[term][documentIndex] += tally\n        index[term].total += tally;\n      }\n      for (const [term, tally] of Object.entries(analysed.bagOfWords))\n      {\n        index[term] = index[term] || {\n          total: 0\n        };\n        index[term][documentIndex] = index[term][documentIndex] || 0;\n        index[term][documentIndex] += tally\n        index[term].total += tally;\n      }\n      this.totalWordsTally += analysed.count;\n    });\n\n    let maximumDocumentsByTerm = 0;\n    for (const docs of Object.values(index))\n    {\n      maximumDocumentsByTerm = Math.max(maximumDocumentsByTerm, Object.keys(docs)\n        .length - 1);\n    }\n    this.maximumDocumentsByTerm = maximumDocumentsByTerm;\n  }\n\n  /**\n   * O(documentIndices)\n   */\n  async removeFromIndex(index, documentIndices, documentsValues)\n  {\n    documentIndices.forEach((documentIndex, valuesOffset) =>\n    {\n      let value = documentsValues[valuesOffset];\n      if (value && value.words)\n      {\n        for (const [term, tally] of Object.entries(value.words))\n        {\n          index[term][documentIndex] -= tally\n          index[term].total -= tally;\n        }\n        for (const [term, tally] of Object.entries(value.bagOfWords))\n        {\n          index[term][documentIndex] -= tally\n          index[term].total -= tally;\n        }\n      }\n    });\n  }\n\n  filterBasedOnIndex(index, filter, results, score)\n  {\n    switch (filter.filter)\n    {\n    case 'query':\n      return this.filterQueryImpl(index, filter, results, score, false);\n    case 'queryexact':\n      return this.filterQueryImpl(index, filter, results, score, true);\n    }\n    return results;\n  }\n\n\n  filterQueryImpl(index, filter, results, score, exact)\n  {\n    let final = false;\n    const analysed = this.analyseValue([\n      [filter.values.join(' '), 1]\n    ]);\n    Object.entries(analysed.words)\n      .map((keywordTally, keywordIndex, all) =>\n      {\n        const [keyword, tally] = keywordTally;\n        let resultFragment = index[keyword];\n        if (resultFragment && resultFragment.total > 0)\n        {\n          results.addKeyword(filter.values[keywordIndex], resultFragment.total);\n          if (!final)\n          {\n            final = {};\n            for (const [result, resultTally] of Object.entries(resultFragment))\n            {\n              if (result !== 'total')\n              {\n                const value = this.values[result];\n                final[result] = score(resultTally,\n                  value.count,\n                  value.maximum,\n                  resultFragment.total,\n                  this.totalWordsTally,\n                  this.values.length,\n                  all.length,\n                  this.maximumDocumentsByTerm) * tally;\n              }\n            }\n          }\n          else\n          {\n            for (let result in final)\n            {\n              if (!(result in resultFragment))\n              {\n                final[result] = undefined;\n              }\n            }\n            for (const [result, resultTally] of Object.entries(resultFragment))\n            {\n              if (result in final)\n              {\n                const value = this.values[result];\n                final[result] *= score(resultTally,\n                  value.count,\n                  value.maximum,\n                  resultFragment.total,\n                  this.totalWordsTally,\n                  this.values.length,\n                  all.length,\n                  this.maximumDocumentsByTerm) * tally;\n              }\n            }\n          }\n        }\n        else\n        {\n          results.addKeyword(filter.values[keywordIndex], 0);\n          if (!this.allowPartialMatch)\n          {\n            final = {};\n\n          }\n        }\n      });\n    Object.entries(analysed.bagOfWords)\n      .map((keywordTally, keywordIndex, all) =>\n      {\n        const [keyword, tally] = keywordTally;\n        let resultFragment = index[keyword];\n        if (resultFragment && resultFragment.total > 0)\n        {\n          for (const [result, resultTally] of Object.entries(resultFragment))\n          {\n            if (result !== 'total')\n            {\n              const value = this.values[result];\n              final[result] += score(resultTally,\n                value.count,\n                value.maximum,\n                resultFragment.total,\n                this.totalWordsTally,\n                this.values.length,\n                all.length,\n                this.maximumDocumentsByTerm) * tally;\n            }\n          }\n        }\n      });\n    if (final)\n    {\n      if (exact)\n      {\n        exact = new RegExp(analysed.values, 'ig')\n      }\n      for (let [result, resultTally] of Object.entries(final))\n      {\n        if (exact)\n        {\n          try\n          {\n            const match = this.values[result].stemmedFull.match(exact);\n            if (match && match.length)\n            {\n              resultTally *= match.length\n            }\n          }\n          catch (e)\n          {\n            console.log(e.stack)\n          }\n        }\n        if (resultTally > 0)\n        {\n          results.addHit(result, resultTally);\n        }\n      }\n    }\n  }\n\n  getSortValue(index)\n  {\n    return this.values[index].stemmedFull\n  }\n\n}\n\nmodule.exports = TextIndex;\nrequire('./register')\n  .add(TextIndex, INDEX_TYPE);\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "Index",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~Index",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "extractObjectValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~extractObjectValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "decoder",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~decoder",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "Lexer",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~Lexer",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "Tagger",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~Tagger",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "lemmer",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~lemmer",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "stemmer",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~stemmer",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "INDEX_TYPE",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~INDEX_TYPE",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "class",
    "name": "TextIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/TextIndex.js",
    "importStyle": "TextIndex",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "Index"
    ]
  },
  {
    "__docId__": 179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "filters",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#filters",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "decoder",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#decoder",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "lex",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#lex",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "tag",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#tag",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "lemm",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#lemm",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "stem",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#stem",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "totalWordsTally",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#totalWordsTally",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "maximumDocumentsByTerm",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#maximumDocumentsByTerm",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "sorts",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#sorts",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "allowPartialMatch",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#allowPartialMatch",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "state",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#state",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "getDocumentValues",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#getDocumentValues",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "document",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "analyseValue",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#analyseValue",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "valuesList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"stemmedFull\": *, \"words\": *, \"bagOfWords\": *, \"count\": *}"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "createIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#createIndex",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "addToIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#addToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "removeFromIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#removeFromIndex",
    "access": "public",
    "description": "O(documentIndices)",
    "lineNumber": 168,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentsValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "filterBasedOnIndex",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#filterBasedOnIndex",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "filterQueryImpl",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#filterQueryImpl",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      },
      {
        "name": "exact",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "getSortValue",
    "memberof": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/index/TextIndex.js~TextIndex#getSortValue",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index/register.js",
    "content": "\"use strict\";\n\nconst lookup = {};\n\nfunction add(Type, type)\n{\n  lookup[type] = Type\n  Type.type = type;\n}\n\nmodule.exports = {\n  lookup,\n  add\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index/register.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "lookup",
    "memberof": "node-information-retrieval-boilerplate/src/index/register.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/register.js~lookup",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/register.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "add",
    "memberof": "node-information-retrieval-boilerplate/src/index/register.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index/register.js~add",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index/register.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "Type",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/index.js",
    "content": "\"use strict\";\n\nmodule.exports = require('./index/register');\n\nrequire('./index/BooleanIndex');\nrequire('./index/NumberIndex');\nrequire('./index/StringIndex');\nrequire('./index/TextIndex');\n\nmodule.exports.processors = require('./processors/register');\nrequire('./processors/AltQuerySuggester');\nrequire('./processors/Sorter');\n\nmodule.exports.System = require('./System');\n\nmodule.exports.StringQueryParser = require('./query/StringQueryParser');\n\nmodule.exports.scores = require('./scores');\n\nmodule.exports.evaluate = require('./evaluate');\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "processors",
    "memberof": "node-information-retrieval-boilerplate/src/index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index.js~processors",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index.js",
    "importStyle": "{processors}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "System",
    "memberof": "node-information-retrieval-boilerplate/src/index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index.js~System",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index.js",
    "importStyle": "{System}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "StringQueryParser",
    "memberof": "node-information-retrieval-boilerplate/src/index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index.js~StringQueryParser",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index.js",
    "importStyle": "{StringQueryParser}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "scores",
    "memberof": "node-information-retrieval-boilerplate/src/index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index.js~scores",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index.js",
    "importStyle": "{scores}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "evaluate",
    "memberof": "node-information-retrieval-boilerplate/src/index.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/index.js~evaluate",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/index.js",
    "importStyle": "{evaluate}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "content": "\"use strict\";\n\nfunction extractAllValues(callback, value, field, scale)\n{\n  let type = typeof value;\n  if (type === 'undefined' || value === null)\n  {\n    return;\n  }\n  if (type === 'object')\n  {\n    if (Array.isArray(value))\n    {\n      for (let part of value)\n      {\n        extractAllValues(callback, part, field, scale);\n      }\n      return;\n    }\n    else\n    {\n      for (let part of Object.values(value))\n      {\n        extractAllValues(callback, part, field, scale);\n      }\n      return\n    }\n  }\n  callback(value, field, scale);\n}\n\nfunction extractFragmentValues(callback, document, fragment, field, scale)\n{\n  if (fragment.length === 0)\n  {\n    return extractAllValues(callback, document, field, scale);\n  }\n  let top = fragment.splice(0, 1)[0];\n  if (!document)\n  {\n    return;\n  }\n  let value = document[top];\n  let type = typeof value;\n  if (type === 'object' && Array.isArray(value))\n  {\n    for (let part of value)\n    {\n      extractFragmentValues(callback, part, fragment.slice(), field, scale);\n    }\n    return;\n  }\n  return extractFragmentValues(callback, value, fragment, field, scale);\n}\n\n\n/**\n * extract values from a document object\n *\n * @param  {object} document target document\n * @param  {object} fields   array of fields or map of fields to score\n * @param  {function} callback callback function will be called for each value\n */\nfunction extractObjectValues(document, fields, callback)\n{\n  if (Array.isArray(fields))\n  {\n    for (let field of fields)\n    {\n      extractFragmentValues(callback, document, field.split('.')\n        .filter(x => x !== ''), field, 1);\n    }\n  }\n  else\n  {\n    for (let [field, scale] of Object.entries(fields))\n    {\n      extractFragmentValues(callback, document, field.split('.')\n        .filter(x => x !== ''), field, scale);\n    }\n  }\n}\n\nmodule.exports = extractObjectValues;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "extractAllValues",
    "memberof": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js~extractAllValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "scale",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "extractFragmentValues",
    "memberof": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js~extractFragmentValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "document",
        "types": [
          "*"
        ]
      },
      {
        "name": "fragment",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "scale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "extractObjectValues",
    "memberof": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/misc/extractObjectValues.js~extractObjectValues",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/misc/extractObjectValues.js",
    "importStyle": "extractObjectValues",
    "description": "extract values from a document object",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "document",
        "description": "target document"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "array of fields or map of fields to score"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function will be called for each value"
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "content": "\"use strict\";\n\nconst Processor = require('./Processor');\nconst extractObjectValues = require('../misc/extractObjectValues');\nconst levenshtein = require('fast-levenshtein')\n\nconst PROCESSOR_TYPE = 'altquery';\n\nclass AltQuerySuggester extends Processor\n{\n  constructor(config = {})\n  {\n    super(config, PROCESSOR_TYPE, ['add', 'results']);\n    this.fields = this.fields || [];\n    this.words = this.words || {};\n  }\n\n  async state()\n  {\n    return Object.assign({\n      fields: this.fields,\n      words: this.words,\n    }, await super.state());\n  }\n\n  async addDocuments(system, documentIndices, documents)\n  {\n    const words = this.words;\n    for (const document of documents)\n    {\n      extractObjectValues(document, this.fields, (newValue, field, scale) =>\n      {\n        if (typeof newValue === 'string')\n        {\n          newValue = newValue.toLowerCase()\n            .replace(/[^a-z]+/g, ' ')\n            .trim();\n          if (newValue)\n          {\n            for (let word of newValue.split(/\\s+/g))\n            {\n              words[word] = words[word] || 0;\n              words[word]++;\n            }\n          }\n        }\n      });\n    }\n  }\n\n  async processResults(system, query, results)\n  {\n    results.altKeywords = [results.keywords.map(kw =>\n      {\n        const\n        {\n          keyword,\n          hits\n        } = kw;\n        if (hits)\n        {\n          return keyword;\n        }\n        else if (keyword === 'and')\n        {\n          return 'and'\n        }\n        else if (keyword === 'or')\n        {\n          return 'or'\n        }\n        else\n        {\n          return this.getClosest(keyword);\n        }\n      })\n      .filter(i => i)\n      .join(' ')\n    ].filter(i => i);\n  }\n\n  getClosest(word)\n  {\n    let closest, closestDiff = 100;\n    const dist = levenshtein.get.bind(levenshtein);\n    for (const target of Object.keys(this.words))\n    {\n      const diff = dist(word, target) / Math.min(word.length, target.length);\n      if (diff < closestDiff)\n      {\n        closestDiff = diff;\n        closest = target;\n      }\n    }\n    return closest;\n  }\n\n}\n\nmodule.exports = AltQuerySuggester;\n// register type for serialisation\nrequire('./register')\n  .add(AltQuerySuggester, PROCESSOR_TYPE);\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "Processor",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~Processor",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "extractObjectValues",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~extractObjectValues",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "levenshtein",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~levenshtein",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "PROCESSOR_TYPE",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~PROCESSOR_TYPE",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "AltQuerySuggester",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js",
    "importStyle": "AltQuerySuggester",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Processor"
    ]
  },
  {
    "__docId__": 222,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "fields",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#fields",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "words",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#words",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "state",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#state",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "addDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#addDocuments",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documents",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "processResults",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#processResults",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "getClosest",
    "memberof": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/AltQuerySuggester.js~AltQuerySuggester#getClosest",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "word",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/processors/Processor.js",
    "content": "\"use strict\";\n\n/**\n * A Processor\n */\nclass Processor\n{\n  /**\n   * Construct a new Processor\n   *\n   * @param {object} [config={}] configuration; see properties\n   */\n  constructor(config = {}, type = undefined, bind = [])\n  {\n    for (let property in config)\n    {\n      /**\n       * @private\n       */\n      this[property] = config[property];\n    }\n    /**\n     * Type of index.\n     * These are usually predefined values. Filled in by class.\n     * @type {string}\n     */\n    this.type = this.type || type;\n    this.bind = this.bind || bind;\n    if (!this.type || !this.bind || this.bind.length === 0)\n    {\n      throw new Error('Type or bind not specified');\n    }\n  }\n\n  /**\n   * Dump current index state.\n   * @return {object}\n   */\n  async state()\n  {\n    return {\n      type: this.type,\n      bind: this.bind,\n    };\n  }\n\n\n  /**\n   * for classes with bind 'add'\n   */\n  async addDocuments(system, documentIndices, documents)\n  {\n    throw new Error('abstract method not implemented');\n  }\n\n  /**\n   * for classes with bind 'remove'\n   */\n  async removeDocuments(system, documentIndices)\n  {\n    throw new Error('abstract method not implemented');\n  }\n\n  /**\n   * for classes with bind 'query'\n   */\n  async processQuery(system, query)\n  {\n    throw new Error('abstract method not implemented');\n  }\n\n  /**\n   * for classes with bind 'results'\n   */\n  async processResults(system, query, results)\n  {\n    throw new Error('abstract method not implemented');\n  }\n\n}\n\nmodule.exports = Processor;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/processors/Processor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "Processor",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/Processor.js",
    "importStyle": "Processor",
    "description": "A Processor",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#constructor",
    "access": "public",
    "description": "Construct a new Processor",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "configuration; see properties"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "[property]",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#[property]",
    "access": "private",
    "description": "",
    "lineNumber": 20,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "type",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#type",
    "access": "public",
    "description": "Type of index.\nThese are usually predefined values. Filled in by class.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "bind",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#bind",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "state",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#state",
    "access": "public",
    "description": "Dump current index state.",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "addDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#addDocuments",
    "access": "public",
    "description": "for classes with bind 'add'",
    "lineNumber": 51,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "documents",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "removeDocuments",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#removeDocuments",
    "access": "public",
    "description": "for classes with bind 'remove'",
    "lineNumber": 59,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "documentIndices",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "processQuery",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#processQuery",
    "access": "public",
    "description": "for classes with bind 'query'",
    "lineNumber": 67,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "processResults",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Processor.js~Processor#processResults",
    "access": "public",
    "description": "for classes with bind 'results'",
    "lineNumber": 75,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "content": "\"use strict\";\n\nconst Processor = require('./Processor');\n\nconst PROCESSOR_TYPE = 'sorter';\n\nclass Sorter extends Processor\n{\n  constructor(config = {})\n  {\n    super(config, PROCESSOR_TYPE, ['results']);\n  }\n\n  async processResults(system, query, results)\n  {\n    try\n    {\n      let sort = query.sort ? query.sort : 'score';\n      // load sort value if not score\n      if (sort !== 'score')\n      {\n        try\n        {\n          const index = system.indicesLookup[sort][0];\n          results.results.forEach(result =>\n          {\n            result[sort] = index.getSortValue(result._index);\n          });\n        }\n        catch (e)\n        {\n          console.log(e.stack)\n          sort = 'score';\n        }\n      }\n      results.results.sort(this.sortFunction(system, sort, query.order));\n      results.results.forEach(result =>\n      {\n        result._index = undefined;\n      })\n    }\n    catch (e)\n    {\n      console.error(e.stack)\n    }\n  }\n\n  sortFunction(system, sort, sortOrder)\n  {\n    const idField = system.idField;\n    const order = sort === 'score' ? 1 : (sortOrder === 'asc' ? -1 : 1);\n    return (a, b) =>\n    {\n      const asort = a[sort],\n        bsort = b[sort];\n      if (asort === bsort)\n      {\n        // document ids are assumed to never be equal\n        // when sorts are equal, order by document ids\n        // they could mean something. e.g. file path or omething\n        if (a[idField] > b[idField])\n        {\n          return 1;\n        }\n        else\n        {\n          return -1;\n        }\n      }\n      else if (bsort > asort)\n      {\n        return order;\n      }\n      else\n      {\n        return -order;\n      }\n    };\n  }\n}\n\nmodule.exports = Sorter;\n// register type for serialisation\nrequire('./register')\n  .add(Sorter, PROCESSOR_TYPE);\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "Processor",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Processor",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "PROCESSOR_TYPE",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/Sorter.js~PROCESSOR_TYPE",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "Sorter",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/Sorter.js",
    "importStyle": "Sorter",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Processor"
    ]
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "processResults",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter#processResults",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "sortFunction",
    "memberof": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/processors/Sorter.js~Sorter#sortFunction",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      },
      {
        "name": "sort",
        "types": [
          "*"
        ]
      },
      {
        "name": "sortOrder",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/processors/register.js",
    "content": "\"use strict\";\n\nconst lookup = {};\n\nfunction add(Type, type)\n{\n  lookup[type] = Type\n  Type.type = type;\n}\n\nmodule.exports = {\n  lookup,\n  add\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/processors/register.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "lookup",
    "memberof": "node-information-retrieval-boilerplate/src/processors/register.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/register.js~lookup",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/register.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "add",
    "memberof": "node-information-retrieval-boilerplate/src/processors/register.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/processors/register.js~add",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/processors/register.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "Type",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/query/Query.js",
    "content": "/**\n * @typedef {object} Query\n * @property {QueryFilter[]} filters\n * @property {string} sort sort field name\n * @property {string} order sort order 'asc' or 'dsc'\n */\n\n/**\n * @typedef {object} QueryFilter\n * @property {string} field of field/index e.g. 'firstName'\n * @property {string} filter filter e.g. 'regex'\n * @property {string[]} values e.g. 'asdf.*'\n */\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/query/Query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "typedef",
    "name": "Query",
    "memberof": "node-information-retrieval-boilerplate/src/query/Query.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/query/Query.js~Query",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "QueryFilter[]"
        ],
        "spread": false,
        "optional": false,
        "name": "filters",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sort",
        "description": "sort field name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "sort order 'asc' or 'dsc'"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Query"
    }
  },
  {
    "__docId__": 252,
    "kind": "typedef",
    "name": "QueryFilter",
    "memberof": "node-information-retrieval-boilerplate/src/query/Query.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/query/Query.js~QueryFilter",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "of field/index e.g. 'firstName'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "filter e.g. 'regex'"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "e.g. 'asdf.*'"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "QueryFilter"
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/query/QueryParser.js",
    "content": "\"use strict\";\n\n/**\n * Helper functionality for parsing query representes\n * in different formats into the one this package supports.\n */\nclass QueryParser\n{\n  constructor(config)\n  {\n    for (let property in config)\n    {\n      /** @private */\n      this[property] = config[property];\n    }\n\n    this.fields = this.fields || {};\n    this.sort = this.sort || [];\n\n    // figure out a default field\n    if (!this.fields[this.defaultField])\n    {\n      for (let [field, body] of Object.entries(this.fields))\n      {\n        if (body.default)\n        {\n          this.defaultField = field;\n          break;\n        }\n      }\n    }\n    this.defaultField = this.defaultField || Object.keys(this.fields)[0];\n    if (!this.fields[this.defaultField])\n    {\n      throw new Error('Could not determine default field');\n    }\n    const filters = this.fields[this.defaultField].filters;\n    this.defaultFilter = filters[0];\n    this.defaultExactFilter = this.defaultFilter + 'exact';\n    if (filters.indexOf(this.defaultExactFilter) === -1)\n    {\n      this.defaultExactFilter = this.defaultFilter;\n    }\n    this.defaultSort = this.defaultSort || false;\n    this.defaultSortOrder = this.defaultSortOrder || 'asc';\n  }\n\n  getDefault()\n  {\n    return {\n      filter: [],\n      sort: this.defaultSort,\n      order: this.defaultSortOrder,\n    };\n  }\n\n}\n\nmodule.exports = QueryParser;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/query/QueryParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "QueryParser",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/query/QueryParser.js",
    "importStyle": "QueryParser",
    "description": "Helper functionality for parsing query representes\nin different formats into the one this package supports.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 255,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "[property]",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#[property]",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "fields",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#fields",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "sort",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#sort",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "defaultField",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#defaultField",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "defaultFilter",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#defaultFilter",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "defaultExactFilter",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#defaultExactFilter",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "defaultSort",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#defaultSort",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "defaultSortOrder",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#defaultSortOrder",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "getDefault",
    "memberof": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/QueryParser.js~QueryParser#getDefault",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"filter\": *, \"sort\": *, \"order\": *}"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "content": "\"use strict\";\n\nconst QueryParser = require('./QueryParser');\nconst decoder = require('unidecode');\n\n/**\n * Helper functionality for parsing query representes\n * in different formats into the one this package supports.\n */\nclass StringQueryParser extends QueryParser\n{\n  constructor(config = {})\n  {\n    super(config);\n  }\n\n  parse(query, maxTokns = 15)\n  {\n    const tokens = Array.from(this.tokenise(query.substr(0, maxTokns * 10)));\n\n    // lets try some bottom up parsing\n    this.parseJoinAllExactMatchTokens(tokens);\n    this.parseJoinAllNotTokens(tokens);\n    this.parseJoinAllFieldTokens(tokens);\n    this.parseJoinAllRegularTokens(tokens);\n    this.parseJoinAllAndOrTokens(tokens);\n    const fresh = this.getDefault();\n    fresh.filter = this.treeToFilters(fresh, {\n      maxTokns\n    }, [tokens, 'and']) || [];\n    return fresh;\n  }\n\n  treeToFilters(fresh, config, tree)\n  {\n    config.tokenIndex = config.tokenIndex || 0;\n    let [values, filter] = tree, field;\n    switch (filter)\n    {\n    case 'and':\n    case 'or':\n      values = values.map(this.treeToFilters.bind(this, fresh, config))\n        .filter(x => x);\n      if (values.length === 0)\n      {\n        return undefined;\n      }\n      else if (values.length === 1)\n      {\n        return values[0];\n      }\n      else\n      {\n        return {\n          filter,\n          values\n        };\n      }\n    case 'not':\n      if (values)\n      {\n        values.splice(2, 0, ...tree.slice(2))\n        values = this.treeToFilters(fresh, config, values);\n        return {\n          filter,\n          values\n        };\n      }\n      else\n      {\n        return;\n      }\n    case 'a':\n    case 'exact':\n      filter = tree[3] || (tree[2] && this.fields[tree[2]] && this.fields[tree[2]].filters[0]) || (filter === 'exact' ? this.defaultExactFilter : this.defaultFilter);\n      field = tree[2] || this.defaultField;\n      values = values.split(' ');\n      if (field === 'sort')\n      {\n        fresh.sort = this.sort.indexOf(values[0]) === -1 ? fresh.sort : values[0];\n        return;\n      }\n      else if (field === 'order')\n      {\n        fresh.order = values[0].toLowerCase() === 'asc' ? 'asc' : 'dsc';\n        return\n      }\n      else\n      {\n        if (!this.fields[field] && this.fields[this.defaultField].filters.indexOf(field) !== -1)\n        {\n          filter = field;\n          field = this.defaultField;\n        }\n        if (!this.fields[field])\n        {\n          return\n        }\n        else if (this.fields[field].filters.indexOf(filter) === -1)\n        {\n          return\n        }\n        else if (config.tokenIndex > config.maxTokns)\n        {\n          return;\n        }\n        else\n        {\n          config.tokenIndex++;\n          return {\n            filter,\n            field,\n            values,\n          };\n        }\n      }\n    default:\n      console.log('UNHANDELLED', filter, values);\n    }\n  }\n\n  parseJoinAllExactMatchTokens(tokens)\n  {\n    for (let i = 0; i < tokens.length; i++)\n    {\n      if (tokens[i][1] === '\"')\n      {\n        tokens[i] = ['', 'exact'];\n        while (i + 1 < tokens.length)\n        {\n          const next = tokens.splice(i + 1, 1)[0];\n          if (next[1] !== '\"')\n          {\n            tokens[i][0] += ' ' + next[0];\n          }\n          else\n          {\n            break;\n          }\n        }\n        tokens[i][0] = tokens[i][0].trim();\n      }\n    }\n  }\n\n  parseJoinAllNotTokens(tokens)\n  {\n    for (let i = 0; i < tokens.length; i++)\n    {\n      if (tokens[i][1] === 'not')\n      {\n        let next = false;\n        while (!next && i + 1 < tokens.length)\n        {\n          next = tokens.splice(i + 1, 1)[0];\n        }\n        tokens[i][0] = next;\n      }\n    }\n  }\n\n  parseJoinAllFieldTokens(tokens)\n  {\n    for (let i = 0; i < tokens.length; i++)\n    {\n      if (tokens[i][1] === ':' && i > 0 && i + 1 < tokens.length)\n      {\n        if (tokens[i - 1].length > 2)\n        {\n          tokens[i + 1].push(tokens[i - 1][2]);\n        }\n        tokens[i + 1].push(tokens[i - 1][0]);\n        tokens.splice(--i, 2);\n      }\n    }\n  }\n\n  parseJoinAllRegularTokens(tokens)\n  {\n    for (let i = 1; i < tokens.length; i++)\n    {\n      const signature = tokens[i - 1][1] + tokens[i - 0][1];\n      if (signature === 'aa' && tokens[i - 1].length === 2 && tokens[i - 0].length === 2)\n      {\n        tokens[i - 1][0] = tokens[i - 1][0] + ' ' + tokens[i - 0][0];\n        tokens.splice(i--, 1)\n      }\n    }\n  }\n\n  parseJoinAllAndOrTokens(tokens)\n  {\n    for (let operator of ['and', 'or'])\n    {\n      for (let i = 0; i < tokens.length; i++)\n      {\n        if (tokens[i][1] === operator)\n        {\n          if (i > 0 && i + 1 < tokens.length)\n          {\n            if (tokens[i - 1][1] === operator)\n            {\n              tokens[i - 1][0].push(tokens[i + 1]);\n            }\n            else\n            {\n              tokens[i - 1] = [\n                [tokens[i - 1], tokens[i + 1]], operator\n              ];\n            }\n            tokens.splice(i--, 2);\n          }\n          else if (typeof tokens[i][0] === 'string')\n          {\n            tokens.splice(i--, 1);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Probably the smallest tokeniser ever written\n   */\n  * tokenise(string)\n  {\n    for (let [char, class_] of this.lemmatise(string))\n    {\n      switch (class_)\n      {\n      case 'a':\n        switch (char.toLowerCase())\n        {\n        case 'and':\n          yield [char, 'and'];\n          continue;\n        case 'or':\n          yield [char, 'or'];\n          continue;\n        case 'not':\n          yield [char, 'not'];\n          continue;\n        }\n        break;\n      case '-':\n        yield [char, 'not'];\n        continue;\n      case ' ':\n        continue;\n      case '0':\n        yield [char, 'a'];\n        continue;\n      }\n      yield [char, class_];\n    }\n  }\n\n  * lemmatise(string)\n  {\n    let last = '';\n    let lastClass = false;\n    let tokens = Array.from(this.lex(string));\n    for (let [char, class_] of tokens)\n    {\n      if (!lastClass)\n      {\n        [last, lastClass] = [char, class_];\n      }\n      else if (lastClass !== class_ && !(lastClass === 'a' && class_ === '0') && !(lastClass === '0' && char === 'e') && !(lastClass === '0' && char === '-'))\n      {\n        if (last === '-' && class_ === '0')\n        {\n          [last, lastClass] = [last + char, class_];\n        }\n        else\n        {\n          yield [last, lastClass];\n          [last, lastClass] = [char, class_];\n        }\n      }\n      else\n      {\n        last += char;\n      }\n    }\n    if (last !== '')\n    {\n      yield [last, lastClass];\n    }\n  }\n\n  * lex(string)\n  {\n    for (let char of decoder(string + '')\n        .replace(/\\s+/g, ' ')\n        .trim())\n    {\n      yield [char, this.classifyChar(char)];\n    }\n  }\n\n  classifyChar(char)\n  {\n    switch (char)\n    {\n      // whitespace\n    case '\"':\n    case \"'\":\n    case \"(\":\n    case \")\":\n    case \"[\":\n    case \"]\":\n      return '\"';\n    case ':':\n      return ':';\n    case '-':\n      return '-';\n    default:\n      if ((char >= 'A' && char <= 'Z') || (char >= 'a' && char <= 'z'))\n      {\n        return 'a'\n      }\n      else if ((char >= '0' && char <= '9') || (char === '.'))\n      {\n        return '0'\n      }\n      else\n      {\n        return ' ';\n      }\n    }\n  }\n\n}\n\n\nmodule.exports = StringQueryParser;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "QueryParser",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~QueryParser",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "decoder",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~decoder",
    "access": "public",
    "export": false,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "StringQueryParser",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/query/StringQueryParser.js",
    "importStyle": "StringQueryParser",
    "description": "Helper functionality for parsing query representes\nin different formats into the one this package supports.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "QueryParser"
    ]
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "parse",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#parse",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxTokns",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 15,
        "defaultValue": "15"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "treeToFilters",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#treeToFilters",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "fresh",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "tree",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"filter\": *, \"field\": *, \"values\": *}"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "parseJoinAllExactMatchTokens",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#parseJoinAllExactMatchTokens",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "parseJoinAllNotTokens",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#parseJoinAllNotTokens",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "parseJoinAllFieldTokens",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#parseJoinAllFieldTokens",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "parseJoinAllRegularTokens",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#parseJoinAllRegularTokens",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "parseJoinAllAndOrTokens",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#parseJoinAllAndOrTokens",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "tokenise",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#tokenise",
    "access": "public",
    "description": "Probably the smallest tokeniser ever written",
    "lineNumber": 225,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "lemmatise",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#lemmatise",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "lex",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#lex",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "classifyChar",
    "memberof": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-information-retrieval-boilerplate/src/query/StringQueryParser.js~StringQueryParser#classifyChar",
    "access": "public",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "params": [
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "node-information-retrieval-boilerplate/src/scores/index.js",
    "content": "\"use strict\";\n\n\n/**\n * binary tf (1)\n *\n * @return {number}          calculated score\n */\nmodule.exports.binary = function ()\n{\n  return 1;\n};\n\n/**\n * raw term count\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.count = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  return t;\n};\n\n/**\n * term frequency (raw cunt / total raw count)\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.termFrequency = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  return t / sum_t;\n};\n\n/**\n * 1 + log(count)\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.logNormal = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  return 1 + Math.log(t);\n};\n\n\n/**\n * doouble normalisation score functon generator K + (1-K) (count / max count)\n *\n * @param  {number} [K=0.5] augment weight\n * @return {function}         score function\n */\nmodule.exports.augmented = function (K = 0.5)\n{\n  return function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n  {\n    return K + K * (t / max_t);\n  };\n};\n\n/**\n * anonymous function - description\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.naiveBayes = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  return sum_all / sum_t / count_d;\n};\n\n/**\n * unary idf (1)\n *\n * @return {number}          calculated score\n */\nmodule.exports.unary = function ()\n{\n  return 1;\n};\n\n/**\n * idf - number of documents / number of documents with term\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.inverseDocumentFrequency = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  return Math.log(count_d / count_dt);\n};\n\n/**\n * idf smooth\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.inverseDocumentFrequencySmooth = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  return Math.log(1 + count_d / count_dt);\n};\n\n/**\n * idf max\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.inverseDocumentFrequencyMax = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  // added a small constant here as 0 score is a special non-result case in the system\n  return Math.log(max_dt / (1 + count_dt) + 1e-10);\n};\n\n/**\n * probailistic idf\n *\n * @param  {number} t        number of times term occurs in document\n * @param  {number} sum_t    sum of t for all terms in document\n * @param  {number} max_t    maximum number of times any term occurs in document\n * @param  {number} sum_dt   total number of terms in document\n * @param  {number} sum_all  total number of terms in document collection\n * @param  {number} count_d  total number of documents\n * @param  {number} count_dt total number of documents with term\n * @param  {number} max_dt   maximum number of documents per term\n * @return {number}          calculated score\n */\nmodule.exports.probabilisticInverseDocumentFrequency = function (t, sum_t, max_t, sum_dt, sum_all, count_d, count_dt, max_dt)\n{\n  // added a small constant here as 0 score is a special non-result case in the system\n  return Math.log((count_d - count_dt) / (count_dt) + 1e-10);\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/src/scores/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "binary",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~binary",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{binary}",
    "description": "binary tf (1)",
    "lineNumber": 9,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    },
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "count",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~count",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{count}",
    "description": "raw term count",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "termFrequency",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~termFrequency",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{termFrequency}",
    "description": "term frequency (raw cunt / total raw count)",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "logNormal",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~logNormal",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{logNormal}",
    "description": "1 + log(count)",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 288,
    "kind": "function",
    "name": "augmented",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~augmented",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{augmented}",
    "description": "doouble normalisation score functon generator K + (1-K) (count / max count)",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "K",
        "description": "augment weight"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "score function"
    }
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "naiveBayes",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~naiveBayes",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{naiveBayes}",
    "description": "anonymous function - description",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 290,
    "kind": "function",
    "name": "unary",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~unary",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{unary}",
    "description": "unary idf (1)",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "function",
    "name": "inverseDocumentFrequency",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~inverseDocumentFrequency",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{inverseDocumentFrequency}",
    "description": "idf - number of documents / number of documents with term",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 292,
    "kind": "function",
    "name": "inverseDocumentFrequencySmooth",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~inverseDocumentFrequencySmooth",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{inverseDocumentFrequencySmooth}",
    "description": "idf smooth",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 293,
    "kind": "function",
    "name": "inverseDocumentFrequencyMax",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~inverseDocumentFrequencyMax",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{inverseDocumentFrequencyMax}",
    "description": "idf max",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "__docId__": 294,
    "kind": "function",
    "name": "probabilisticInverseDocumentFrequency",
    "memberof": "node-information-retrieval-boilerplate/src/scores/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-information-retrieval-boilerplate/src/scores/index.js~probabilisticInverseDocumentFrequency",
    "access": "public",
    "export": true,
    "importPath": "information-retrieval-boilerplate/node-information-retrieval-boilerplate/src/scores/index.js",
    "importStyle": "{probabilisticInverseDocumentFrequency}",
    "description": "probailistic idf",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "number of times term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_t",
        "description": "sum of t for all terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_t",
        "description": "maximum number of times any term occurs in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_dt",
        "description": "total number of terms in document"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sum_all",
        "description": "total number of terms in document collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_d",
        "description": "total number of documents"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count_dt",
        "description": "total number of documents with term"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_dt",
        "description": "maximum number of documents per term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "calculated score"
    }
  },
  {
    "kind": "index",
    "content": "# Information Retrieval Boilerplate\n\n[![SCM](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/public.svg)](https://github.com/nahidakbar/node-information-retrieval-boilerplate)\n[![Build Status](https://travis-ci.org/nahidakbar/node-information-retrieval-boilerplate.svg?branch=master)](https://travis-ci.org/nahidakbar/node-information-retrieval-boilerplate)\n[![Documentation](https://nahidakbar.github.io/node-information-retrieval-boilerplate/badge.svg)](https://nahidakbar.github.io/node-information-retrieval-boilerplate/)\n[![Coverage](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/lines.svg)](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/)\n[![Coverage](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/functions.svg)](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/)\n[![Coverage](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/branches.svg)](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/)\n[![Coverage](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/statements.svg)](https://nahidakbar.github.io/node-information-retrieval-boilerplate/coverage/)\n\nBoilerplate for me to be able to compose simple and customisable informational\nretrieval systems in JavaScript.\n\n![Concept](doc/concept.png)\n",
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"information-retrieval-boilerplate\",\n  \"version\": \"0.1.2\",\n  \"description\": \"Various boilerplate stuff for making information retieval systems easier to make.\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"test\": \"jbn test\",\n    \"init\": \"jbn init\",\n    \"docs\": \"jbn docs\",\n    \"form\": \"jbn form\",\n    \"lint\": \"jbn lint\"\n  },\n  \"author\": \"Nahid Akbar <mail@nahidakbar.net> (http://nahidakbar.net/)\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"jbn\": \"latest\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/nahidakbar/node-information-retrieval-boilerplate.git\"\n  },\n  \"dependencies\": {\n    \"fast-levenshtein\": \"^2.0.6\",\n    \"lancaster-stemmer\": \"^1.0.2\",\n    \"lemmatizer\": \"0.0.1\",\n    \"pos\": \"^0.4.2\",\n    \"unidecode\": \"^0.1.8\"\n  }\n}\n",
    "longname": "/home/travis/build/nahidakbar/node-information-retrieval-boilerplate/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]